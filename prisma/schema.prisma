//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  BUSINESS
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  SCHEDULED
  COMPLETED
  RESCHEDULED
  CANCELLED
  DECLINED
}

enum NotificationType {
  INFO
  WARNING
  REMINDER
}

model Account {
  id                       String  @id() @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id() @default(cuid())
  name          String
  email         String         @unique()
  password      String?
  emailVerified DateTime?
  image         String?        @db.Text()
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  business      Business?
  pets          Pet[]
  appointments  Appointment[]
  notifications Notification[]
}

model Business {
  id            String            @id() @default(uuid())
  logo          String?           @db.Text()
  businessName  String
  address       String
  latitude      String
  longitude     String
  phoneNumber   String
  verified      Boolean           @default(false)
  description   String?
  documents     BusinessDocument?
  services      Service[]
  appointments  Appointment[]
  owner         User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String            @unique()
  timeslots     TimeSlot[]
  notifications Notification[]
}

model BusinessDocument {
  id             String   @id() @default(uuid())
  license        String?  @db.Text()
  businessPermit String?  @db.Text()
  certification  String?  @db.Text()
  business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId     String   @unique()
}

model Service {
  id         String    @id() @default(uuid())
  name       String
  variants   Variant[]
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
}

model Variant {
  id           String               @id() @default(uuid())
  productId    String
  service      Service              @relation(fields: [productId], references: [id], onDelete: Cascade)
  name         String
  price        Float
  appointments AppointmentService[]
}

model Pet {
  id           Int           @id() @default(autoincrement())
  image        String        @db.Text()
  name         String
  species      String
  breed        String
  age          String
  gender       Gender
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt()
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  appointments Appointment[]
}

model Appointment {
  id         String               @id() @default(uuid())
  datetime   DateTime
  business   Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  status     Status
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  pet        Pet                  @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId      Int
  totalPrice Int
  note       String?
  services   AppointmentService[]
}

model TimeSlot {
  id         String   @id() @default(uuid())
  time       String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  @@unique([time, businessId])
}

model AppointmentService {
  id            String      @id() @default(uuid())
  appointmentId String
  variantId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, variantId])
}

model Notification {
  id              String           @id() @default(uuid())
  userMessage     String?
  businessMessage String?
  type            NotificationType
  createdAt       DateTime         @default(now())
  readAt          DateTime?
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  business        Business?        @relation(fields: [businessId], references: [id])
  businessId      String?
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}
