// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

plugin hooks {
    provider = '@zenstackhq/tanstack-query'
    target = 'react'
    version = 'v5'
    output = "./src/lib/hooks"
}

plugin zod {
    provider = '@core/zod'
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Gender {
    MALE
    FEMALE
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    BUSINESS
    ADMIN
}

model User {
    id            String         @id @default(cuid())
    name          String
    email         String         @unique
    password      String?        @password @omit
    emailVerified DateTime?
    image         String?        @db.Text
    role          Role           @default(USER)
    accounts      Account[]
    sessions      Session[]
    business      Business?
    pets          Pet[]
    appointments  Appointment[]
    notifications Notification[]

    // Everyone can signup, and user profile is also publicly readable
    @@allow('create', true)

    // Only the user can update or delete their own profile, or an admin can
    @@allow('update,delete', auth().id == this.id || auth().role == ADMIN)
    @@allow('read', auth().id == this.id || auth() == null)  // Assuming profiles are publicly readable
}

model Business {
    id            String            @id @default(uuid())
    logo          String?           @db.Text
    businessName  String
    address       String
    latitude      String
    longitude     String
    phoneNumber   String
    verified      Boolean           @default(false)
    description   String?
    documents     BusinessDocument?
    services      Service[]
    appointments  Appointment[]
    owner         User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId       String            @unique
    timeslots     TimeSlot[]
    notifications Notification[]

    @@allow('create', true)  // Anyone can create a business
    @@allow('read', true)     // Business info can be read by anyone
    @@allow('update', auth() == owner || auth().role == ADMIN)  // Only the owner or ADMIN can update
}

model BusinessDocument {
    id             String   @id @default(uuid())
    license        String?  @db.Text
    businessPermit String?  @db.Text
    certification  String?  @db.Text
    business       Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
    businessId     String   @unique

    @@allow('create', true)  // Anyone can create a business document
    @@allow('read', auth().business.owner == business.owner)  // Only the correct business can read its documents
}

model Service {
    id         String    @id @default(uuid())
    name       String
    variants   Variant[]
    business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
    businessId String

    @@allow('all', true)  // Anyone can create a business document
}

model Variant {
    id           String               @id @default(uuid())
    productId    String
    service      Service              @relation(fields: [productId], references: [id], onDelete: Cascade)
    name         String
    price        Float
    appointments AppointmentService[]

    @@allow('all', true)  // Anyone can create a business document
}

model Pet {
    id           Int           @id @default(autoincrement())
    image        String        @db.Text
    name         String
    species      String
    breed        String
    age          String
    gender       Gender
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId      String
    appointments Appointment[]

    @@allow('read,create', true)

    @@allow('update,delete', auth() == owner)
}


enum Status {
    PENDING         // Appointment is awaiting approval or confirmation
    APPROVED        // Appointment is approved but not yet scheduled
    SCHEDULED       // Appointment has been scheduled
    COMPLETED       // Appointment has been completed
    RESCHEDULED     // Appointment has been rescheduled
    CANCELLED       // Appointment has been cancelled
    DECLINED        // Appointment request was declined by the user or provider
}

model Appointment {
    id         String               @id @default(uuid())
    datetime   DateTime
    business   Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
    businessId String
    status     Status
    user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String               @default(auth().id)
    pet        Pet                  @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId      Int
    totalPrice Int
    note       String?
    services   AppointmentService[]

    @@allow('all', true)
}

model TimeSlot {
    id         String   @id @default(uuid())
    time       String
    business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
    businessId String

    @@allow('all', true)
}

model AppointmentService {
    id            String      @id @default(uuid())
    appointmentId String
    variantId     String
    appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
    variant       Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)

    @@unique([appointmentId, variantId])
    @@allow('all', true)
}

enum NotificationType {
    INFO
    WARNING
    REMINDER
}

model Notification {
    id              String           @id @default(uuid())
    userMessage     String?    // Message specific to users
    businessMessage String?   // Message specific to businesses
    type            NotificationType     // Type of notification, e.g., "info", "warning", "reminder"
    createdAt       DateTime         @default(now())
    readAt          DateTime?  // Timestamp for when the notification was read (null if unread)
    user            User?            @relation(fields: [userId], references: [id])
    userId          String?
    business        Business?        @relation(fields: [businessId], references: [id])
    businessId      String?

    @@allow('all', true)
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
